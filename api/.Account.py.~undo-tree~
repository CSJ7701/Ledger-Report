(undo-tree-save-format-version . 1)
"9fe1b69c39241a58753af94fef447f38e5e19ca1"
[nil nil nil nil (26509 12083 653570 838000) 0 nil]
([nil nil ((1 . 14) (t 26509 12023 536222 921000)) nil (26509 12083 653569 662000) 0 nil])
([nil nil ((14 . 15)) nil (26509 12083 653568 732000) 0 nil])
([nil nil ((15 . 20)) nil (26509 12083 653567 922000) 0 nil])
([nil nil ((20 . 23)) nil (26509 12083 653567 178000) 0 nil])
([nil nil ((23 . 26)) nil (26509 12083 653566 89000) 0 nil])
([nil nil ((1 . 2) (1 . 2)) nil (26509 12083 653565 37000) 0 nil])
([nil nil ((1 . 14)) nil (26509 12083 653564 156000) 0 nil])
([nil nil ((8 . 14) (#("led" 0 3 (fontified nil)) . -8) (8 . 11) (#("ledger" 0 6 (fontified t)) . -8) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) 14) nil (26509 12083 653563 15000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -39) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("+" 0 1 (fontified t)) . -40) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 41) nil (26509 12083 653559 362000) 0 nil])
([nil nil ((39 . 54)) nil (26509 12083 653556 994000) 0 nil])
([nil nil ((54 . 61)) nil (26509 12083 653556 617000) 0 nil])
([nil nil ((61 . 62)) nil (26509 12083 653556 205000) 0 nil])
([nil nil ((62 . 70)) nil (26509 12083 653555 689000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -69) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 70) nil (26509 12083 653554 705000) 0 nil])
([nil nil ((69 . 78)) nil (26509 12083 653552 518000) 0 nil])
([nil nil ((78 . 79)) nil (26509 12083 653552 23000) 0 nil])
([nil nil ((79 . 88)) nil (26509 12083 653551 526000) 0 nil])
([nil nil ((88 . 91)) nil (26509 12083 653550 783000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -88) (undo-tree-id120 . -1) (#("." 0 1 (fontified t)) . -89) (undo-tree-id121 . -1) (#("." 0 1 (fontified t)) . -90) (undo-tree-id122 . -1) 91) nil (26509 12083 653549 924000) 0 nil])
([nil nil ((88 . 95)) nil (26509 12083 653547 515000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -93) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("e" 0 1 (fontified t)) . -94) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 95) nil (26509 12083 653546 334000) 0 nil])
([nil nil ((93 . 100)) nil (26509 12083 653541 734000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -93) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("c" 0 1 (fontified t)) . -94) (undo-tree-id106 . -1) (#("c" 0 1 (fontified t)) . -95) (undo-tree-id107 . -1) (#("o" 0 1 (fontified t)) . -96) (undo-tree-id108 . -1) (#("u" 0 1 (fontified t)) . -97) (undo-tree-id109 . -1) (#("n" 0 1 (fontified t)) . -98) (undo-tree-id110 . -1) (#("t" 0 1 (fontified t)) . -99) (undo-tree-id111 . -1) 100) nil (26509 12083 653540 189000) 0 nil])
([nil nil ((93 . 111)) nil (26509 12083 653534 72000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -110) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 111) nil (26509 12083 653532 926000) 0 nil])
([nil nil ((110 . 117)) nil (26509 12083 653529 871000) 0 nil])
([nil nil ((110 . 117) (#("acc" 0 3 (fontified nil)) . -110) (110 . 113) (#("account" 0 7 (fontified t)) . -110) (undo-tree-id0 . -7) (undo-tree-id1 . -7) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) (undo-tree-id33 . -6) (undo-tree-id34 . -6) (undo-tree-id35 . -6) (undo-tree-id36 . -6) (undo-tree-id37 . -6) (undo-tree-id38 . -6) (undo-tree-id39 . -6) (undo-tree-id40 . -6) (undo-tree-id41 . -6) (undo-tree-id42 . -6) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (undo-tree-id46 . -7) (undo-tree-id47 . -7) (undo-tree-id48 . -7) (undo-tree-id49 . -7) (undo-tree-id50 . -7) (undo-tree-id51 . -7) (undo-tree-id52 . -7) (undo-tree-id53 . -7) (undo-tree-id54 . -7) (undo-tree-id55 . -7) (undo-tree-id56 . -7) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -7) (undo-tree-id60 . -7) (undo-tree-id61 . -7) (undo-tree-id62 . -7) (undo-tree-id63 . -7) (undo-tree-id64 . -7) (undo-tree-id65 . -7) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -7) (undo-tree-id70 . -7) (undo-tree-id71 . -7) (undo-tree-id72 . -7) (undo-tree-id73 . -7) (undo-tree-id74 . -7) (undo-tree-id75 . -7) (undo-tree-id76 . -7) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) (undo-tree-id82 . -7) (undo-tree-id83 . -7) (undo-tree-id84 . -7) (undo-tree-id85 . -7) (undo-tree-id86 . -7) (undo-tree-id87 . -7) (undo-tree-id88 . -7) (undo-tree-id89 . -7) (undo-tree-id90 . -7) (undo-tree-id91 . -7) (undo-tree-id92 . -7) (undo-tree-id93 . -7) (undo-tree-id94 . -7) (undo-tree-id95 . -7) (undo-tree-id96 . -7) (undo-tree-id97 . -7) 117) nil (26509 12083 653526 38000) 0 nil])
([nil nil ((117 . 118)) nil (26509 12083 653398 111000) 0 nil])
([nil nil ((119 . 127) (#("        " 0 8 (fontified nil match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 118) (undo-tree-id148 . -8) (117 . 127) (t 26509 12083 772626 755000)) nil (26509 12101 265294 431000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 123) (undo-tree-id147 . -4) 127) nil (26509 12101 265292 263000) 0 nil])
([nil nil ((123 . 127)) nil (26509 12101 265290 561000) 0 nil])
([nil nil ((124 . 132) (#("pro" 0 3 (fontified nil)) . -124) (124 . 127) (#("property" 0 8 (fontified nil)) . -124) (124 . 132) (#("pro" 0 3 (face py-decorators-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -124) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) 127) nil (26509 12101 265289 23000) 0 nil])
([nil nil ((132 . 137)) nil (26509 12101 265284 978000) 0 nil])
([nil nil ((137 . 144)) nil (26509 12101 265284 126000) 0 nil])
([nil nil ((#("e" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -143) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 144) nil (26509 12101 265282 884000) 0 nil])
([nil nil ((143 . 151)) nil (26509 12101 265279 782000) 0 nil])
([nil nil ((151 . 152)) nil (26509 12101 265278 852000) 0 nil])
([nil nil ((152 . 161)) nil (26509 12101 265277 981000) 0 nil])
([nil nil ((161 . 176)) nil (26509 12101 265277 24000) 0 nil])
([nil nil ((173 . 187) (#("le" 0 2 (fontified nil)) . -173) (173 . 175) (#("ledger_account" 0 14 (fontified nil)) . -173) (173 . 187) (#("led" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -173) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) 176) nil (26509 12101 265274 475000) 0 nil])
([nil nil ((187 . 196)) nil (26509 12101 265252 828000) 0 nil])
([nil nil ((196 . 198) (t 26509 12101 278466 364000)) nil (26509 12324 823082 289000) 0 nil])
([nil nil ((200 . 204) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 199) (undo-tree-id156 . -4) (198 . 204)) nil (26509 12324 823081 155000) 0 nil])
([nil nil ((204 . 213)) nil (26509 12324 823079 586000) 0 nil])
([nil nil ((205 . 213) (#("pro" 0 3 (fontified nil)) . -205) (205 . 208) (#("property" 0 8 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -205) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) 213) nil (26509 12324 823078 408000) 0 nil])
([nil nil ((213 . 218)) nil (26509 12324 823074 577000) 0 nil])
([nil nil ((218 . 227)) nil (26509 12324 823073 699000) 0 nil])
([nil nil ((#("n" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -224) (undo-tree-id149 . -1) (#("a" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -225) (undo-tree-id150 . -1) (#("l" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -226) (undo-tree-id151 . -1) 227) nil (26509 12324 823072 99000) 0 nil])
([nil nil ((224 . 235)) nil (26509 12324 823062 263000) 0 nil])
([nil nil ((235 . 236)) nil (26509 12324 823061 482000) 0 nil])
([nil nil ((236 . 245)) nil (26509 12324 823060 376000) 0 nil])
([nil nil ((245 . 257)) nil (26509 12324 823056 327000) 0 nil])
([nil nil ((259 . 267) (#("        " 0 8 (fontified nil match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 258) (undo-tree-id166 . -8) (257 . 267) (t 26509 12324 942838 246000)) nil (26509 12349 986607 543000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 263) (undo-tree-id165 . -4) 267) nil (26509 12349 986605 507000) 0 nil])
([nil nil ((263 . 272)) nil (26509 12349 986603 765000) 0 nil])
([nil nil ((264 . 272) (#("pro" 0 3 (fontified nil)) . -264) (264 . 267) (#("property" 0 8 (face py-decorators-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -264) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) 272) nil (26509 12349 986602 577000) 0 nil])
([nil nil ((272 . 277)) nil (26509 12349 986599 87000) 0 nil])
([nil nil ((277 . 284)) nil (26509 12349 986598 254000) 0 nil])
([nil nil ((284 . 292)) nil (26509 12349 986597 447000) 0 nil])
([nil nil ((292 . 301)) nil (26509 12349 986596 615000) 0 nil])
([nil nil ((301 . 306)) nil (26509 12349 986595 730000) 0 nil])
([nil nil ((306 . 319)) nil (26509 12349 986594 877000) 0 nil])
([nil nil ((313 . 327) (#("le" 0 2 (fontified nil)) . -313) (313 . 315) (#("ledger_account" 0 14 (fontified nil)) . -313) (313 . 327) (#("ledger" 0 6 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -313) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) 319) nil (26509 12349 986592 678000) 0 nil])
([nil nil ((327 . 333)) nil (26509 12349 986577 961000) 0 nil])
([nil nil ((335 . 339) (#("    " 0 4 (fontified nil match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 334) (undo-tree-id212 . -4) (333 . 339) (t 26509 12350 106696 185000)) nil (26509 12371 455710 951000) 0 nil])
([nil nil ((339 . 348)) nil (26509 12371 455710 16000) 0 nil])
([nil nil ((340 . 348) (#("pro" 0 3 (fontified nil)) . -340) (340 . 343) (#("property" 0 8 (face py-decorators-face fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -340) (undo-tree-id208 . -8) (undo-tree-id209 . -8) (undo-tree-id210 . -8) (undo-tree-id211 . -8) 348) nil (26509 12371 455708 979000) 0 nil])
([nil nil ((348 . 353)) nil (26509 12371 455706 816000) 0 nil])
([nil nil ((353 . 367)) nil (26509 12371 455706 348000) 0 nil])
([nil nil ((#("t" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -357) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("r" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -358) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("a" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -359) (undo-tree-id200 . -1) (#("n" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -360) (undo-tree-id201 . -1) (#("s" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -361) (undo-tree-id202 . -1) (#("a" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -362) (undo-tree-id203 . -1) (#("c" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -363) (undo-tree-id204 . -1) (#("t" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -364) (undo-tree-id205 . -1) (#("i" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -365) (undo-tree-id206 . -1) (#("o" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -366) (undo-tree-id207 . -1) 367) nil (26509 12371 455704 730000) 0 nil])
([nil nil ((357 . 369)) nil (26509 12371 455694 847000) 0 nil])
([nil nil ((369 . 375)) nil (26509 12371 455694 391000) 0 nil])
([nil nil ((375 . 384)) nil (26509 12371 455694 36000) 0 nil])
([nil nil ((384 . 399)) nil (26509 12371 455693 500000) 0 nil])
([nil nil ((396 . 410) (#("le" 0 2 (fontified nil)) . -396) (396 . 398) (#("ledger_account" 0 14 (fontified nil)) . -396) (396 . 410) (#("led" 0 3 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -396) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -2) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) 399) nil (26509 12371 455691 407000) 0 nil])
([nil nil ((410 . 416)) nil (26509 12371 455666 600000) 0 nil])
([nil nil ((416 . 418) (t 26509 12371 465581 44000)) nil (26509 12376 703476 28000) 0 nil])
([nil nil ((420 . 424) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 419) (undo-tree-id249 . -4) (418 . 424) (t 26509 12376 733553 389000)) nil (26509 12455 650273 920000) 0 nil])
([nil nil ((424 . 443)) nil (26509 12455 650272 778000) 0 nil])
([nil nil ((443 . 444)) nil (26509 12455 650272 475000) 0 nil])
([nil nil ((444 . 453)) nil (26509 12455 650272 52000) 0 nil])
([nil nil ((453 . 461)) nil (26509 12455 650271 579000) 0 nil])
([nil nil ((461 . 474)) nil (26509 12455 650271 21000) 0 nil])
([nil nil ((474 . 478)) nil (26509 12455 650270 535000) 0 nil])
([nil nil ((478 . 479)) nil (26509 12455 650270 128000) 0 nil])
([nil nil ((479 . 480)) nil (26509 12455 650269 478000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id248 . -1) 480) nil (26509 12455 650268 894000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -474) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -475) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("m" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -476) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -477) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#(":" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -478) (undo-tree-id247 . -1) 479) nil (26509 12455 650267 122000) 0 nil])
([nil nil ((474 . 480)) nil (26509 12455 650257 619000) 0 nil])
([nil nil ((480 . 481)) nil (26509 12455 650257 146000) 0 nil])
([nil nil ((481 . 491)) nil (26509 12455 650256 583000) 0 nil])
([nil nil ((491 . 504)) nil (26509 12455 650255 991000) 0 nil])
([nil nil ((504 . 513)) nil (26509 12455 650255 339000) 0 nil])
([nil nil ((513 . 514)) nil (26509 12455 650254 726000) 0 nil])
([nil nil ((514 . 527)) nil (26509 12455 650253 953000) 0 nil])
([nil nil ((527 . 540)) nil (26509 12455 650253 298000) 0 nil])
([nil nil ((540 . 554)) nil (26509 12455 650252 792000) 0 nil])
([nil nil ((554 . 555)) nil (26509 12455 650252 159000) 0 nil])
([nil nil ((555 . 556)) nil (26509 12455 650251 569000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -555) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) 556) nil (26509 12455 650250 615000) 0 nil])
([nil nil ((555 . 576)) nil (26509 12455 650247 840000) 0 nil])
([nil nil ((576 . 578)) nil (26509 12455 650247 266000) 0 nil])
([nil nil ((578 . 591)) nil (26509 12455 650246 701000) 0 nil])
([nil nil ((591 . 598)) nil (26509 12455 650246 119000) 0 nil])
([nil nil ((598 . 599)) nil (26509 12455 650244 915000) 0 nil])
([nil nil ((599 . 609)) nil (26509 12455 650244 95000) 0 nil])
([nil nil ((609 . 610)) nil (26509 12455 650243 242000) 0 nil])
([nil nil ((610 . 623)) nil (26509 12455 650242 592000) 0 nil])
([nil nil ((623 . 630)) nil (26509 12455 650241 822000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -629) (undo-tree-id226 . -1) 630) nil (26509 12455 650240 837000) 0 nil])
([nil nil ((629 . 630)) nil (26509 12455 650239 307000) 0 nil])
([nil nil ((630 . 651)) nil (26509 12455 650238 715000) 0 nil])
([nil nil ((651 . 654)) nil (26509 12455 650237 912000) 0 nil])
([nil nil ((420 . 424) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 419) (undo-tree-id225 . -4) (418 . 424)) nil (26509 12455 650236 982000) 0 nil])
([nil nil ((424 . 428)) nil (26509 12455 650235 390000) 0 nil])
([nil nil ((#("t" 0 1 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -427) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 428) nil (26509 12455 650234 535000) 0 nil])
([nil nil ((427 . 433)) nil (26509 12455 650231 796000) 0 nil])
([nil nil ((425 . 433) (#("prop" 0 4 (fontified nil)) . -425) (425 . 429) (#("property" 0 8 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -425) (undo-tree-id217 . -8) (undo-tree-id218 . -8) (undo-tree-id219 . -8) (undo-tree-id220 . -8) 433) nil (26509 12455 650230 625000) 0 nil])
([nil nil ((433 . 438)) nil (26509 12455 650226 636000) 0 nil])
([nil nil ((438 . 452)) nil (26509 12455 650225 946000) 0 nil])
([nil nil ((452 . 453)) nil (26509 12455 650225 528000) 0 nil])
([nil nil ((375 . 376)) nil (26509 12455 650225 226000) 0 nil])
([nil nil ((292 . 293)) nil (26509 12455 650224 639000) 0 nil])
([nil nil ((455 . 464)) nil (26509 12455 650224 32000) 0 nil])
([nil nil ((464 . 479)) nil (26509 12455 650223 538000) 0 nil])
([nil nil ((476 . 490) (#("le" 0 2 (fontified nil)) . -476) (476 . 478) (#("ledger_account" 0 14 (fontified nil)) . -476) (476 . 490) (#("led" 0 3 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -476) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) 479) nil (26509 12455 650221 691000) 0 nil])
([nil nil ((490 . 497)) nil (26509 12455 650207 501000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -495) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -496) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) 497 (t 26509 12455 778171 350000)) nil (26509 12466 647807 307000) 0 nil])
([nil nil ((#("ledger_account." 0 15 (fontified t match-data (0 3 0 1 1 2 2 3))) . -712) (undo-tree-id416 . -15) 727 (t 26509 12466 769122 825000)) nil (26509 12475 552816 18000) 0 nil])
([nil nil ((716 . 717)) nil (26509 12475 552807 393000) 0 nil])
([nil nil ((717 . 730)) nil (26509 12475 552806 136000) 0 nil])
([nil nil ((730 . 731)) nil (26509 12475 552802 86000) 0 nil])
([nil nil ((718 . 726) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 718) 731 (t 26509 12475 673084 286000)) nil (26509 12476 994532 778000) 0 nil])
([nil nil ((200 . 204) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 199) (undo-tree-id442 . -4) (198 . 204) (t 26509 12477 113078 116000)) nil (26509 13389 372897 76000) 0 nil])
([nil nil ((204 . 209)) nil (26509 13389 372895 811000) 0 nil])
([nil nil ((#("t" 0 1 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -207) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (#("p" 0 1 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -208) (undo-tree-id441 . -1) 209) nil (26509 13389 372894 949000) 0 nil])
([nil nil ((207 . 211)) nil (26509 13389 372892 231000) 0 nil])
([nil nil ((205 . 213) (#("prope" 0 5 (fontified nil)) . -205) (205 . 210) (#("property" 0 8 (fontified nil)) . -205) (205 . 213) (#("proper" 0 6 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -205) (undo-tree-id433 . -6) (undo-tree-id434 . -6) (undo-tree-id435 . -6) (undo-tree-id436 . -6) 211) nil (26509 13389 372891 253000) 0 nil])
([nil nil ((213 . 218)) nil (26509 13389 372888 831000) 0 nil])
([nil nil ((218 . 234)) nil (26509 13389 372888 306000) 0 nil])
([nil nil ((234 . 235)) nil (26509 13389 372887 867000) 0 nil])
([nil nil ((235 . 244)) nil (26509 13389 372887 398000) 0 nil])
([nil nil ((244 . 247)) nil (26509 13389 372887 2000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -246) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) 247) nil (26509 13389 372886 393000) 0 nil])
([nil nil ((246 . 248)) nil (26509 13389 372884 372000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -247) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) 248) nil (26509 13389 372883 684000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -246) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) 247) nil (26509 13389 372880 769000) 0 nil])
([nil nil ((246 . 262)) nil (26509 13389 372878 64000) 0 nil])
([nil nil ((256 . 270) (#("led" 0 3 (fontified nil)) . -256) (256 . 259) (#("ledger_account" 0 14 (fontified nil)) . -256) (256 . 270) (#("ledger" 0 6 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -256) (undo-tree-id417 . -6) (undo-tree-id418 . -6) (undo-tree-id419 . -6) (undo-tree-id420 . -6) 262) nil (26509 13389 372876 529000) 0 nil])
([nil nil ((270 . 277)) nil (26509 13389 372864 875000) 0 nil])
([nil nil ((277 . 279)) nil (26509 13389 372860 494000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -277) (undo-tree-id443 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -278) (undo-tree-id444 . -1) 279 (t 26509 13389 494296 35000)) nil (26509 13397 893628 263000) 0 nil])
([nil nil ((277 . 282)) nil (26509 13397 893615 875000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -277) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -278) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("a" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -279) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("m" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -280) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (#("e" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -281) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) 282 (t 26509 13398 14290 522000)) nil (26509 13406 89128 724000) 0 nil])
([nil nil ((141 . 145) (t 26509 13406 210285 315000)) nil (26509 13604 969079 881000) 0 nil])
([nil nil ((204 . 208) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 203) (undo-tree-id895 . -4) (202 . 208)) nil (26509 13604 969079 215000) 0 nil])
([nil nil ((208 . 211)) nil (26509 13604 969077 929000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -208) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -209) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("f" 0 1 (face py-def-class-face fontified t match-data (0 3 0 1 1 2 2 3))) . -210) (undo-tree-id894 . -1) 211) nil (26509 13604 969076 910000) 0 nil])
([nil nil ((208 . 216)) nil (26509 13604 969071 861000) 0 nil])
([nil nil ((209 . 217) (#("pro" 0 3 (fontified nil)) . -209) (209 . 212) (#("property" 0 8 (fontified nil)) . -209) (209 . 217) (#("propert" 0 7 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -209) (undo-tree-id882 . -7) (undo-tree-id883 . -7) (undo-tree-id884 . -7) (undo-tree-id885 . -7) 216) nil (26509 13604 969070 948000) 0 nil])
([nil nil ((217 . 222)) nil (26509 13604 969068 325000) 0 nil])
([nil nil ((222 . 236)) nil (26509 13604 969067 628000) 0 nil])
([nil nil ((236 . 237)) nil (26509 13604 969067 154000) 0 nil])
([nil nil ((237 . 246)) nil (26509 13604 969066 753000) 0 nil])
([nil nil ((246 . 249)) nil (26509 13604 969066 173000) 0 nil])
([nil nil ((249 . 261)) nil (26509 13604 969065 629000) 0 nil])
([nil nil ((258 . 272) (#("le" 0 2 (fontified nil)) . -258) (258 . 260) (#("ledger_account" 0 14 (fontified nil)) . -258) (258 . 272) (#("led" 0 3 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -258) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -1) (undo-tree-id843 . -2) (undo-tree-id844 . -2) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -2) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) (undo-tree-id853 . -2) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -2) (undo-tree-id858 . -2) (undo-tree-id859 . -2) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -3) (undo-tree-id865 . -3) (undo-tree-id866 . -3) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) 261) nil (26509 13604 969062 887000) 0 nil])
([nil nil ((272 . 277)) nil (26509 13604 969027 603000) 0 nil])
([nil nil ((#("        return self.ledger_account.posts()" 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 14 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 14 15 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 15 19 (face py-object-reference-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 19 20 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 20 40 (fontified t match-data (0 3 0 1 1 2 2 3)) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . 536) (undo-tree-id904 . -42) (undo-tree-id905 . -42) (undo-tree-id906 . -42) (t 26509 13605 90184 271000)) nil (26509 13661 263774 231000) 0 nil])
([nil nil ((536 . 544)) nil (26509 13661 263772 179000) 0 nil])
([nil nil ((544 . 556)) nil (26509 13661 263766 738000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -553) (undo-tree-id901 . -1) (#("s" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -554) (undo-tree-id902 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -555) (undo-tree-id903 . -1) 556) nil (26509 13661 263765 846000) 0 nil])
([nil nil ((553 . 559)) nil (26509 13661 263763 115000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -556) (undo-tree-id898 . -1) (#("s" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -557) (undo-tree-id899 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -558) (undo-tree-id900 . -1) 559) nil (26509 13661 263762 111000) 0 nil])
([nil nil ((556 . 563)) nil (26509 13661 263759 939000) 0 nil])
([nil nil ((563 . 564)) nil (26509 13661 263759 460000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -563) (undo-tree-id897 . -1) 564) nil (26509 13661 263758 906000) 0 nil])
([nil nil ((563 . 572)) nil (26509 13661 263757 731000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -571) (undo-tree-id896 . -1) 572) nil (26509 13661 263756 940000) 0 nil])
([nil nil ((571 . 587)) nil (26509 13661 263748 512000) 0 nil])
([nil nil ((587 . 601) (#("ledger_account" 0 14 (fontified nil)) . -587) (587 . 601)) nil (26509 13661 263747 328000) 0 nil])
([nil nil ((601 . 607)) nil (26509 13661 263745 954000) 0 nil])
([nil nil ((607 . 610)) nil (26509 13661 263741 776000) 0 nil])
([nil nil ((15 . 16) (t 26509 13661 280163 151000)) nil (26509 13675 158725 14000) 0 nil])
([nil nil ((15 . 16)) nil (26509 13675 158724 444000) 0 nil])
([nil nil ((16 . 24)) nil (26509 13675 158723 960000) 0 nil])
([nil nil ((20 . 31) (#("Tra" 0 3 (fontified nil)) . -20) (20 . 23) (#("Transaction" 0 11 (fontified nil)) . -20) (20 . 31) (#("Tran" 0 4 (fontified t)) . -20) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) 24) nil (26509 13675 158722 836000) 0 nil])
([nil nil ((31 . 41)) nil (26509 13675 158719 851000) 0 nil])
([nil nil ((39 . 50) (#("Tr" 0 2 (fontified nil)) . -39) (39 . 41) (#("Transaction" 0 11 (fontified nil)) . -39) (39 . 50) (#("Tr" 0 2 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -39) (undo-tree-id907 . -2) (undo-tree-id908 . -2) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -2) (undo-tree-id953 . -2) (undo-tree-id954 . -2) (undo-tree-id955 . -2) (undo-tree-id956 . -2) (undo-tree-id957 . -2) (undo-tree-id958 . -2) (undo-tree-id959 . -2) (undo-tree-id960 . -2) (undo-tree-id961 . -2) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (undo-tree-id964 . -2) (undo-tree-id965 . -2) (undo-tree-id966 . -2) (undo-tree-id967 . -2) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) 41) nil (26509 13675 158714 493000) 0 nil])
([nil nil ((#("        print(\"HOW\")" 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 13 (face py-builtins-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 14 19 (face font-lock-string-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 431) (undo-tree-id994 . -20) (t 26509 13675 169158 351000)) nil (26509 13701 557743 508000) 0 nil])
([nil nil ((431 . 439)) nil (26509 13701 557736 40000) 0 nil])
([nil nil ((439 . 460)) nil (26509 13701 557735 434000) 0 nil])
([nil nil ((460 . 481)) nil (26509 13701 557734 943000) 0 nil])
([nil nil ((481 . 485)) nil (26509 13701 557733 925000) 0 nil])
([nil nil ((485 . 488)) nil (26509 13701 557729 536000) 0 nil])
([nil nil ((992 . 996) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 991) (undo-tree-id1037 . -4) (990 . 996) (t 26509 13701 679149 625000)) nil (26509 13745 225068 991000) 0 nil])
([nil nil ((996 . 1014)) nil (26509 13745 225067 919000) 0 nil])
([nil nil ((1014 . 1015)) nil (26509 13745 225067 507000) 0 nil])
([nil nil ((1015 . 1024)) nil (26509 13745 225067 172000) 0 nil])
([nil nil ((1024 . 1041)) nil (26509 13745 225066 764000) 0 nil])
([nil nil ((1041 . 1048)) nil (26509 13745 225066 235000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1047) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) 1048) nil (26509 13745 225065 695000) 0 nil])
([nil nil ((1047 . 1056)) nil (26509 13745 225063 8000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1054) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1055) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) 1056) nil (26509 13745 225062 123000) 0 nil])
([nil nil ((1054 . 1066)) nil (26509 13745 225058 366000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1064) (undo-tree-id1023 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1065) (undo-tree-id1024 . -1) 1066) nil (26509 13745 225057 745000) 0 nil])
([nil nil ((1064 . 1071)) nil (26509 13745 225056 411000) 0 nil])
([nil nil ((1071 . 1080)) nil (26509 13745 225055 965000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1074) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1075) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1076) (undo-tree-id1019 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1077) (undo-tree-id1020 . -1) (#("l" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1078) (undo-tree-id1021 . -1) (#("}" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1079) (undo-tree-id1022 . -1) 1080) nil (26509 13745 225054 758000) 0 nil])
([nil nil ((1074 . 1075)) nil (26509 13745 225047 728000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1074) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) 1075) nil (26509 13745 225045 829000) 0 nil])
([nil nil ((1074 . 1082)) nil (26509 13745 225043 631000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1080) (undo-tree-id1005 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1081) (undo-tree-id1006 . -1) 1082) nil (26509 13745 225042 967000) 0 nil])
([nil nil ((1080 . 1082)) nil (26509 13745 225041 291000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1079) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (#("c" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1080) (undo-tree-id1003 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1081) (undo-tree-id1004 . -1) 1082) nil (26509 13745 225040 359000) 0 nil])
([nil nil ((1079 . 1091)) nil (26509 13745 225036 680000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1090) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) 1091) nil (26509 13745 225035 335000) 0 nil])
([nil nil ((1090 . 1102)) nil (26509 13745 225021 916000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1098) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1099) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1100) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("}" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1101) (undo-tree-id1122 . -1) 1102 (t 26509 13745 346136 428000)) nil (26509 13760 52612 37000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1084) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1085) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (#("p" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1086) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1087) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1088) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (#("=" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1089) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("{" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1090) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1091) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1092) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#("l" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1093) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (#("f" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1094) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("." 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1095) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1096) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1097) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) 1098) nil (26509 13760 52602 816000) 0 nil])
([nil nil ((1084 . 1092)) nil (26509 13760 52569 139000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1091) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) 1092) nil (26509 13760 52567 624000) 0 nil])
([nil nil ((1091 . 1107)) nil (26509 13760 52553 952000) 0 nil])
([nil nil ((153 . 162) (t 26509 13760 175132 262000)) nil (26509 36187 42819 429000) 0 nil])
([nil nil ((404 . 408) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 403) (undo-tree-id1148 . -4) (402 . 408)) nil (26509 36187 42818 709000) 0 nil])
([nil nil ((403 . 407)) nil (26509 36187 42817 684000) 0 nil])
([nil nil ((407 . 416)) nil (26509 36187 42817 131000) 0 nil])
([nil nil ((408 . 416) (#("pro" 0 3 (fontified nil)) . -408) (408 . 411) (#("property" 0 8 (face py-decorators-face fontified t match-data (0 3 0 1 1 2 2 3))) . -408) (undo-tree-id1144 . -8) (undo-tree-id1145 . -8) (undo-tree-id1146 . -8) (undo-tree-id1147 . -8) 416) nil (26509 36187 42816 339000) 0 nil])
([nil nil ((416 . 421)) nil (26509 36187 42814 4000) 0 nil])
([nil nil ((421 . 425)) nil (26509 36187 42813 562000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 424) (undo-tree-id1143 . -1) 425) nil (26509 36187 42812 961000) 0 nil])
([nil nil ((424 . 425)) nil (26509 36187 42812 19000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -423) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("f" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -424) (undo-tree-id1142 . -1) 425) nil (26509 36187 42810 789000) 0 nil])
([nil nil ((423 . 429)) nil (26509 36187 42808 12000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -424) (undo-tree-id1133 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -425) (undo-tree-id1134 . -1) (#("r" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -426) (undo-tree-id1135 . -1) (#("e" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -427) (undo-tree-id1136 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -428) (undo-tree-id1137 . -1) 429) nil (26509 36187 42806 955000) 0 nil])
([nil nil ((424 . 439)) nil (26509 36187 42803 875000) 0 nil])
([nil nil ((439 . 440)) nil (26509 36187 42803 411000) 0 nil])
([nil nil ((440 . 449)) nil (26509 36187 42802 916000) 0 nil])
([nil nil ((449 . 456)) nil (26509 36187 42802 457000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -455) (undo-tree-id1132 . -1) 456) nil (26509 36187 42801 694000) 0 nil])
([nil nil ((#("        return" 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 14 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 441) (undo-tree-id1123 . -8) (undo-tree-id1124 . -14) (undo-tree-id1125 . -14) (undo-tree-id1126 . -14) (undo-tree-id1127 . -14) (undo-tree-id1128 . -14) (undo-tree-id1129 . -14) (undo-tree-id1130 . -14) (undo-tree-id1131 . -14)) nil (26509 36187 42797 984000) 0 nil])
([nil nil ((441 . 449)) nil (26509 36187 42782 511000) 0 nil])
([nil nil ((449 . 452)) nil (26509 36187 42778 231000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -449) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (#("." 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -450) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (#("." 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -451) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) 452 (t 26509 36187 165724 545000)) nil (26509 36279 696413 578000) 0 nil])
([nil nil ((439 . 443)) nil (26509 36279 696409 940000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -440) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (#(">" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -441) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#(" " 0 1 (fontified nil)) . 442) (442 . 443) (#(" " 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 442) (undo-tree-id1200 . -1) 443) nil (26509 36279 696408 123000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 439) (439 . 440) (#(" " 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 439) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) 440) nil (26509 36279 696394 339000) 0 nil])
([nil nil ((439 . 443) (t 26509 36279 817777 393000)) nil (26509 36296 26600 159000) 0 nil])
([nil nil ((15 . 16)) nil (26509 36296 26599 470000) 0 nil])
([nil nil ((15 . 24)) nil (26509 36296 26598 602000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -23) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) 24) nil (26509 36296 26597 193000) 0 nil])
([nil nil ((23 . 27)) nil (26509 36296 26586 40000) 0 nil])
([nil nil ((27 . 38)) nil (26509 36296 26581 946000) 0 nil])
([nil nil ((467 . 480) (t 26509 36296 148786 376000)) nil (26509 36305 574677 846000) 0 nil])
([nil nil ((480 . 487)) nil (26509 36305 574673 407000) 0 nil])
([nil nil ((497 . 508) (t 26509 36305 695791 585000)) nil (26509 36389 305424 907000) 0 nil])
([nil nil ((#("        accounts = " 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 16 (face py-variable-name-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 16 17 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 17 18 (face font-lock-operator-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 18 19 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 489) (undo-tree-id1250 . -8) (undo-tree-id1251 . -15) (undo-tree-id1252 . -15) (undo-tree-id1253 . -19) (undo-tree-id1254 . -15)) nil (26509 36389 305423 529000) 0 nil])
([nil nil ((489 . 497)) nil (26509 36389 305420 957000) 0 nil])
([nil nil ((497 . 503)) nil (26509 36389 305420 488000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -500) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("r" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -501) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -502) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) 503) nil (26509 36389 305419 584000) 0 nil])
([nil nil ((500 . 521)) nil (26509 36389 305413 300000) 0 nil])
([nil nil ((521 . 523)) nil (26509 36389 305412 878000) 0 nil])
([nil nil ((523 . 534)) nil (26509 36389 305412 384000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -532) (undo-tree-id1236 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -533) (undo-tree-id1237 . -1) 534) nil (26509 36389 305411 733000) 0 nil])
([nil nil ((532 . 553)) nil (26509 36389 305408 998000) 0 nil])
([nil nil ((553 . 554)) nil (26509 36389 305408 536000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -546) (undo-tree-id1228 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -547) (undo-tree-id1229 . -1) (#("l" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -548) (undo-tree-id1230 . -1) (#("u" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -549) (undo-tree-id1231 . -1) (#("e" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -550) (undo-tree-id1232 . -1) (#("s" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -551) (undo-tree-id1233 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -552) (undo-tree-id1234 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -553) (undo-tree-id1235 . -1) 554) nil (26509 36389 305406 525000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -529) (undo-tree-id1211 . -1) (#("o" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -530) (undo-tree-id1212 . -1) (#("u" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -531) (undo-tree-id1213 . -1) (#("r" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -532) (undo-tree-id1214 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -533) (undo-tree-id1215 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -534) (undo-tree-id1216 . -1) (#("l" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -535) (undo-tree-id1217 . -1) (#("." 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -536) (undo-tree-id1218 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -537) (undo-tree-id1219 . -1) (#("c" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -538) (undo-tree-id1220 . -1) (#("c" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -539) (undo-tree-id1221 . -1) (#("o" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -540) (undo-tree-id1222 . -1) (#("u" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -541) (undo-tree-id1223 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -542) (undo-tree-id1224 . -1) (#("t" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -543) (undo-tree-id1225 . -1) (#("s" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -544) (undo-tree-id1226 . -1) (#("." 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -545) (undo-tree-id1227 . -1) 546) nil (26509 36389 305342 26000) 0 nil])
([nil nil ((177 . 186)) nil (26509 36389 305323 965000) 0 nil])
([nil nil ((186 . 204)) nil (26509 36389 305319 944000) 0 nil])
([nil nil ((#("        return [child for child in self." 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 14 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 14 15 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 16 22 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 22 25 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 25 32 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 32 34 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 34 35 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 35 39 (face py-object-reference-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 39 40 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 516) (undo-tree-id1259 . -40) (t 26509 36389 426835 968000)) nil (26509 36401 803258 541000) 0 nil])
([nil nil ((516 . 524)) nil (26509 36401 803256 986000) 0 nil])
([nil nil ((524 . 537)) nil (26509 36401 803256 484000) 0 nil])
([nil nil ((537 . 542)) nil (26509 36401 803255 721000) 0 nil])
([nil nil ((542 . 548)) nil (26509 36401 803255 181000) 0 nil])
([nil nil ((542 . 556) (#("le" 0 2 (fontified nil)) . -542) (542 . 544) (#("ledger_account" 0 14 (fontified nil)) . -542) (542 . 556) (#("ledger" 0 6 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -542) (undo-tree-id1255 . -6) (undo-tree-id1256 . -6) (undo-tree-id1257 . -6) (undo-tree-id1258 . -6) 548) nil (26509 36401 803253 201000) 0 nil])
([nil nil ((556 . 566)) nil (26509 36401 803239 367000) 0 nil])
([nil nil ((566 . 567) (t 26509 36401 924842 417000)) nil (26509 36412 594730 0) 0 nil])
([nil nil ((567 . 580)) nil (26509 36412 594729 323000) 0 nil])
([nil nil ((580 . 586)) nil (26509 36412 594728 280000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -585) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) 586) nil (26509 36412 594727 417000) 0 nil])
([nil nil ((585 . 594)) nil (26509 36412 594724 639000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -593) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) 594) nil (26509 36412 594723 235000) 0 nil])
([nil nil ((593 . 614)) nil (26509 36412 594712 445000) 0 nil])
([nil nil ((614 . 618)) nil (26509 36412 594708 499000) 0 nil])
([nil nil ((618 . 631) (t 26509 36412 715847 949000)) nil (26509 36434 17145 227000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -580) (undo-tree-id1270 . -1) (#("e" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -581) (undo-tree-id1271 . -1) (#("l" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -582) (undo-tree-id1272 . -1) (#("f" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -583) (undo-tree-id1273 . -1) (#("." 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -584) (undo-tree-id1274 . -1) 585) nil (26509 36434 17143 928000) 0 nil])
([nil nil ((516 . 517)) nil (26509 36434 17139 168000) 0 nil])
([nil nil ((516 . 524)) nil (26509 36434 17138 573000) 0 nil])
([nil nil ((524 . 537)) nil (26509 36434 17137 976000) 0 nil])
([nil nil ((635 . 648)) nil (26509 36434 17137 337000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 644) (undo-tree-id1269 . -4) 648) nil (26509 36434 17135 851000) 0 nil])
([nil nil ((644 . 648)) nil (26509 36434 17127 69000) 0 nil])
([nil nil ((648 . 659)) nil (26509 36434 17122 659000) 0 nil])
([nil nil ((659 . 664) (t 26509 36434 138858 836000)) nil (26509 36448 697013 794000) 0 nil])
([nil nil ((665 . 669) (#("            " 0 12 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -665) (undo-tree-id1281 . -4) 669) nil (26509 36448 697013 46000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -665) (undo-tree-id1280 . -4) 669) nil (26509 36448 697011 565000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -664) (undo-tree-id1279 . -1) 665) nil (26509 36448 697009 859000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -660) (undo-tree-id1278 . -4) 664) nil (26509 36448 697008 354000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -659) (undo-tree-id1277 . -1) 660) nil (26509 36448 697006 854000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -202) (undo-tree-id1275 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -203) (undo-tree-id1276 . -1) 204) nil (26509 36448 697004 589000) 0 nil])
([nil nil ((202 . 217)) nil (26509 36448 696992 901000) 0 nil])
([nil nil ((#("        self.children = self.children()" 0 8 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 8 12 (face py-object-reference-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 12 13 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 13 21 (face py-variable-name-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 21 22 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 22 23 (face font-lock-operator-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 23 24 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 24 28 (face py-object-reference-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 28 37 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 178) (undo-tree-id1285 . -29) (undo-tree-id1286 . -37) (undo-tree-id1287 . -37) (undo-tree-id1288 . -37) (t 26509 36448 818866 228000)) nil (26509 36473 312673 195000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 178) (undo-tree-id1284 . 1)) nil (26509 36473 312669 453000) 0 nil])
([nil nil ((#("        
" 0 9 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 178) (undo-tree-id1282 . 9) (undo-tree-id1283 . -9)) nil (26509 36473 312665 209000) 0 nil])
([nil nil ((#("        return" 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 14 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 666) (t 26509 36473 435878 494000)) nil (26509 36546 505135 814000) 0 nil])
([nil nil ((666 . 674) (#(" " 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 666)) nil (26509 36546 505134 459000) 0 nil])
([nil nil ((674 . 691)) nil (26509 36546 505133 633000) 0 nil])
([nil nil ((733 . 742)) nil (26509 36546 505132 857000) 0 nil])
([nil nil ((742 . 757)) nil (26509 36546 505132 261000) 0 nil])
([nil nil ((757 . 778)) nil (26509 36546 505131 525000) 0 nil])
([nil nil ((778 . 799)) nil (26509 36546 505130 602000) 0 nil])
([nil nil ((799 . 802)) nil (26509 36546 505126 52000) 0 nil])
([nil nil ((137 . 146) (t 26509 36546 625914 88000)) nil (26509 37316 127200 705000) 0 nil])
([nil nil ((186 . 195) (t 26509 37316 249241 574000)) nil (26509 37319 579946 850000) 0 nil])
([nil nil ((195 . 207)) nil (26509 37319 579942 665000) 0 nil])
([nil nil ((207 . 208) (t 26509 37319 702242 933000)) nil (26509 37323 491188 992000) 0 nil])
([nil nil ((208 . 210)) nil (26509 37323 491188 357000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 209) (undo-tree-id1290 . -1) 210) nil (26509 37323 491187 475000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -208) (undo-tree-id1289 . -1) 209) nil (26509 37323 491184 555000) 0 nil])
([nil nil ((208 . 217)) nil (26509 37323 491173 107000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 730) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) 731 (t 26509 37323 612244 470000)) nil (26509 37484 261592 44000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -729) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) 730) nil (26509 37484 261590 364000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -714) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("i" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -715) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (#("r" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -716) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#("e" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -717) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("c" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -718) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (#("t" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -719) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("_" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -720) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("b" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -721) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -722) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (#("l" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -723) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (#("a" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -724) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("n" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -725) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (#("c" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -726) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (#("e" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . -727) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (#(" " 0 1 (fontified nil)) . 728) (728 . 729) (#(" " 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 728) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) 729) nil (26509 37484 261587 323000) 0 nil])
([nil nil ((714 . 721)) nil (26509 37484 261571 330000) 0 nil])
([nil nil ((#("        child_balance = sum(child.amount for child in self.children)" 0 8 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 8 21 (face py-variable-name-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 21 22 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 22 23 (face font-lock-operator-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 23 24 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 24 27 (face py-builtins-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 28 41 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 41 44 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 44 51 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 51 53 (face font-lock-keyword-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 53 54 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 54 58 (face py-object-reference-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 58 67 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 67 68 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 764) (undo-tree-id1293 . -28) (undo-tree-id1294 . -15) (undo-tree-id1295 . -15) (undo-tree-id1296 . -15) (undo-tree-id1297 . -15) (undo-tree-id1298 . -15) (undo-tree-id1299 . -15) (undo-tree-id1300 . -15) (undo-tree-id1301 . -15) (undo-tree-id1302 . -15) (undo-tree-id1303 . -15) (undo-tree-id1304 . -15) (undo-tree-id1305 . -68)) nil (26509 37484 261570 39000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8))) . 764) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1)) nil (26509 37484 261558 112000) 0 nil])
([nil nil ((#("journal" 0 7 (fontified t)) . -139) (undo-tree-id1500 . -7) (undo-tree-id1501 . -7) (undo-tree-id1502 . -7) (undo-tree-id1503 . -7) (undo-tree-id1504 . -7) (undo-tree-id1505 . -7) (undo-tree-id1506 . -7) (undo-tree-id1507 . -7) (undo-tree-id1508 . -7) (undo-tree-id1509 . -7) (undo-tree-id1510 . -7) (undo-tree-id1511 . -7) (undo-tree-id1512 . -7) (undo-tree-id1513 . -7) (undo-tree-id1514 . -7) (undo-tree-id1515 . -7) (undo-tree-id1516 . -7) (undo-tree-id1517 . -7) (undo-tree-id1518 . -7) (undo-tree-id1519 . -7) (undo-tree-id1520 . -7) (undo-tree-id1521 . -7) (undo-tree-id1522 . -7) (undo-tree-id1523 . -7) (undo-tree-id1524 . -7) (undo-tree-id1525 . -7) (undo-tree-id1526 . -7) (undo-tree-id1527 . -7) (undo-tree-id1528 . -7) (undo-tree-id1529 . -7) (undo-tree-id1530 . -7) (undo-tree-id1531 . -7) (undo-tree-id1532 . -7) (undo-tree-id1533 . -7) (undo-tree-id1534 . -7) (undo-tree-id1535 . -7) (undo-tree-id1536 . -7) (undo-tree-id1537 . -7) 146 (t 26509 37484 383307 118000)) nil (26509 37535 37261 715000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 138) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) 139) nil (26509 37535 37237 628000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -137) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) 138) nil (26509 37535 37199 813000) 0 nil])
([nil nil ((#("        self.journal = journal" 0 8 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 8 12 (face py-object-reference-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 12 13 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 13 20 (face py-variable-name-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 20 21 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 21 22 (face font-lock-operator-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7)) 22 30 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 178) (undo-tree-id1539 . -30) (undo-tree-id1540 . -30) (undo-tree-id1541 . -30) (undo-tree-id1542 . -30) (undo-tree-id1543 . -30) (undo-tree-id1544 . -30) (undo-tree-id1545 . -30) (undo-tree-id1546 . -30) (undo-tree-id1547 . -30) (undo-tree-id1548 . -30) (undo-tree-id1549 . -30) (undo-tree-id1550 . -30) (t 26509 37535 166326 710000)) nil (26509 37537 130512 567000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . 178) (undo-tree-id1538 . -1)) nil (26509 37537 130502 392000) 0 nil])
([nil nil ((178 . 179) (t 26509 37537 252327 513000)) nil (26509 37540 402657 598000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -178) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) 179) nil (26509 37540 402652 896000) 0 nil])
([nil nil ((178 . 179) (t 26509 37540 415328 731000)) nil (26509 37547 275111 675000) 0 nil])
([nil nil ((#("0" 0 1 (face py-number-face fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -178) (undo-tree-id1599 . -1) 179) nil (26509 37547 275108 107000) 0 nil])
([nil nil ((1227 . 1231) (#("    " 0 4 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 1226) (undo-tree-id1605 . -4) (1225 . 1231) (t 26509 37547 398331 417000)) nil (26509 40094 514455 864000) 0 nil])
([nil nil ((1231 . 1235)) nil (26509 40094 514454 667000) 0 nil])
([nil nil ((1235 . 1241)) nil (26509 40094 514454 207000) 0 nil])
([nil nil ((#("d" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1240) (undo-tree-id1604 . -1) 1241) nil (26509 40094 514453 648000) 0 nil])
([nil nil ((1240 . 1246)) nil (26509 40094 514452 557000) 0 nil])
([nil nil ((1246 . 1247)) nil (26509 40094 514452 46000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1246) (undo-tree-id1603 . -1) 1247) nil (26509 40094 514451 221000) 0 nil])
([nil nil ((1246 . 1251)) nil (26509 40094 514450 215000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1250) (undo-tree-id1602 . -1) 1251) nil (26509 40094 514449 563000) 0 nil])
([nil nil ((1250 . 1251)) nil (26509 40094 514448 414000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1250) (undo-tree-id1601 . -1) 1251) nil (26509 40094 514447 658000) 0 nil])
([nil nil ((1250 . 1263)) nil (26509 40094 514446 405000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1262) (undo-tree-id1600 . -1) 1263) nil (26509 40094 514445 336000) 0 nil])
([nil nil ((1262 . 1263)) nil (26509 40094 514436 897000) 0 nil])
([nil nil ((1263 . 1274)) nil (26509 40094 514436 375000) 0 nil])
([nil nil ((1274 . 1275)) nil (26509 40094 514435 807000) 0 nil])
([nil nil ((1275 . 1284)) nil (26509 40094 514434 829000) 0 nil])
([nil nil ((1284 . 1287)) nil (26509 40094 514430 293000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1284) (undo-tree-id1609 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1285) (undo-tree-id1610 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1286) (undo-tree-id1611 . -1) 1287 (t 26509 40094 638120 819000)) nil (26509 40301 133996 683000) 0 nil])
([nil nil ((38 . 39)) nil (26509 40301 133994 82000) 0 nil])
([nil nil ((39 . 44)) nil (26509 40301 133993 564000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -43) (undo-tree-id1608 . -1) 44) nil (26509 40301 133992 943000) 0 nil])
([nil nil ((43 . 45)) nil (26509 40301 133991 625000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -43) (undo-tree-id1606 . -1) (#("a" 0 1 (fontified t)) . -44) (undo-tree-id1607 . -1) 45) nil (26509 40301 133990 176000) 0 nil])
([nil nil ((43 . 64)) nil (26509 40301 133982 534000) 0 nil])
([nil nil ((64 . 68)) nil (26509 40301 133978 120000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -64) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("i" 0 1 (fontified t)) . -65) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("m" 0 1 (fontified t)) . -66) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (#("e" 0 1 (fontified t)) . -67) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) 68 (t 26509 40301 258697 320000)) nil (26509 40302 757495 668000) 0 nil])
([nil nil ((1289 . 1290) (t 26509 40302 881694 139000)) nil (26509 40312 499938 161000) 0 nil])
([nil nil ((1290 . 1295)) nil (26509 40312 499937 614000) 0 nil])
([nil nil ((1305 . 1306)) nil (26509 40312 499937 227000) 0 nil])
([nil nil ((1306 . 1309)) nil (26509 40312 499936 773000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1308) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) 1309) nil (26509 40312 499935 330000) 0 nil])
([nil nil ((1308 . 1310)) nil (26509 40312 499918 648000) 0 nil])
([nil nil ((1306 . 1307) (t 26509 40312 625675 80000)) nil (26509 40314 362593 956000) 0 nil])
([nil nil ((1322 . 1325) (t 26509 40314 486671 447000)) nil (26509 40316 379040 832000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1322) (undo-tree-id1871 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1323) (undo-tree-id1872 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1324) (undo-tree-id1873 . -1) 1325 (t 26509 40316 502667 516000)) nil (26509 40750 909925 367000) 0 nil])
([nil nil ((1322 . 1323)) nil (26509 40750 909923 210000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1322) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) 1323) nil (26509 40750 909922 504000) 0 nil])
([nil nil ((1322 . 1343)) nil (26509 40750 909919 467000) 0 nil])
([nil nil ((1343 . 1344)) nil (26509 40750 909919 153000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1343) (undo-tree-id1866 . -1) 1344) nil (26509 40750 909918 514000) 0 nil])
([nil nil ((1343 . 1347)) nil (26509 40750 909917 536000) 0 nil])
([nil nil ((1347 . 1355) (#("property" 0 8 (fontified nil)) . -1347) (1347 . 1355)) nil (26509 40750 909917 9000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t match-data (0 0))) . -1347) (undo-tree-id1858 . -1) (#("r" 0 1 (fontified t match-data (0 0))) . -1348) (undo-tree-id1859 . -1) (#("o" 0 1 (fontified t match-data (0 0))) . -1349) (undo-tree-id1860 . -1) (#("p" 0 1 (fontified t match-data (0 0))) . -1350) (undo-tree-id1861 . -1) (#("e" 0 1 (fontified t match-data (0 0))) . -1351) (undo-tree-id1862 . -1) (#("r" 0 1 (fontified t match-data (0 0))) . -1352) (undo-tree-id1863 . -1) (#("t" 0 1 (fontified t match-data (0 0))) . -1353) (undo-tree-id1864 . -1) (#("y" 0 1 (face py-builtins-face fontified t match-data (0 0))) . -1354) (undo-tree-id1865 . -1) 1355) nil (26509 40750 909915 254000) 0 nil])
([nil nil ((1347 . 1360)) nil (26509 40750 909910 654000) 0 nil])
([nil nil ((1360 . 1376)) nil (26509 40750 909910 169000) 0 nil])
([nil nil ((1376 . 1393)) nil (26509 40750 909909 714000) 0 nil])
([nil nil ((1393 . 1414)) nil (26509 40750 909909 24000) 0 nil])
([nil nil ((1414 . 1415)) nil (26509 40750 909908 607000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1414) (undo-tree-id1857 . -1) 1415) nil (26509 40750 909908 115000) 0 nil])
([nil nil ((1414 . 1427)) nil (26509 40750 909907 23000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1426) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) 1427) nil (26509 40750 909905 605000) 0 nil])
([nil nil ((1426 . 1427)) nil (26509 40750 909884 391000) 0 nil])
([nil nil ((1427 . 1440)) nil (26509 40750 909883 817000) 0 nil])
([nil nil ((1440 . 1441)) nil (26509 40750 909883 133000) 0 nil])
([nil nil ((1428 . 1436) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1428) (undo-tree-id1791 . -12) (undo-tree-id1792 . -12) (undo-tree-id1793 . -12) (undo-tree-id1794 . -12) (undo-tree-id1795 . -12) (undo-tree-id1796 . -12) (undo-tree-id1797 . -12) (undo-tree-id1798 . -12) (undo-tree-id1799 . -12) (undo-tree-id1800 . -12) (undo-tree-id1801 . -12) (undo-tree-id1802 . -12) (undo-tree-id1803 . -12) (undo-tree-id1804 . -12) (undo-tree-id1805 . -12) (undo-tree-id1806 . -12) (undo-tree-id1807 . -12) (undo-tree-id1808 . -12) (undo-tree-id1809 . -12) (undo-tree-id1810 . -12) (undo-tree-id1811 . -12) (undo-tree-id1812 . -12) (undo-tree-id1813 . -12) 1441) nil (26509 40750 909879 579000) 0 nil])
([nil nil ((1429 . 1437) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 1428) (undo-tree-id2006 . -8) (1436 . 1437) (t 26509 40751 34483 637000)) nil (26509 40766 646869 530000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1433) (undo-tree-id2005 . -4) 1437) nil (26509 40766 646868 187000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1429) (undo-tree-id2004 . -4) 1433) nil (26509 40766 646867 214000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1428) (undo-tree-id2003 . -1) 1429) nil (26509 40766 646865 979000) 0 nil])
([nil nil ((1428 . 1440)) nil (26509 40766 646864 987000) 0 nil])
([nil nil ((1428 . 1436) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1428) (undo-tree-id2002 . -12) 1440) nil (26509 40766 646864 481000) 0 nil])
([nil nil ((1437 . 1446)) nil (26509 40766 646863 287000) 0 nil])
([nil nil ((1446 . 1458)) nil (26509 40766 646862 869000) 0 nil])
([nil nil ((1458 . 1479)) nil (26509 40766 646862 409000) 0 nil])
([nil nil ((1479 . 1480)) nil (26509 40766 646861 963000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1479) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) 1480) nil (26509 40766 646861 281000) 0 nil])
([nil nil ((1479 . 1485)) nil (26509 40766 646858 471000) 0 nil])
([nil nil ((1477 . 1498) (#("filt" 0 4 (fontified nil)) . -1477) (1477 . 1481) (#("filtered_transactions" 0 21 (fontified nil)) . -1477) (1477 . 1498) (#("filtered" 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1477) (undo-tree-id1874 . -8) (undo-tree-id1875 . -8) (undo-tree-id1876 . -4) (undo-tree-id1877 . -4) (undo-tree-id1878 . -4) (undo-tree-id1879 . -4) (undo-tree-id1880 . -4) (undo-tree-id1881 . -4) (undo-tree-id1882 . -4) (undo-tree-id1883 . -4) (undo-tree-id1884 . -4) (undo-tree-id1885 . -4) (undo-tree-id1886 . -4) (undo-tree-id1887 . -4) (undo-tree-id1888 . -4) (undo-tree-id1889 . -4) (undo-tree-id1890 . -4) (undo-tree-id1891 . -4) (undo-tree-id1892 . -4) (undo-tree-id1893 . -4) (undo-tree-id1894 . -4) (undo-tree-id1895 . -4) (undo-tree-id1896 . -4) (undo-tree-id1897 . -4) (undo-tree-id1898 . -4) (undo-tree-id1899 . -5) (undo-tree-id1900 . -5) (undo-tree-id1901 . -5) (undo-tree-id1902 . -5) (undo-tree-id1903 . -5) (undo-tree-id1904 . -5) (undo-tree-id1905 . -5) (undo-tree-id1906 . -5) (undo-tree-id1907 . -5) (undo-tree-id1908 . -5) (undo-tree-id1909 . -5) (undo-tree-id1910 . -5) (undo-tree-id1911 . -5) (undo-tree-id1912 . -5) (undo-tree-id1913 . -5) (undo-tree-id1914 . -5) (undo-tree-id1915 . -5) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . -6) (undo-tree-id1919 . -6) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6) (undo-tree-id1922 . -6) (undo-tree-id1923 . -6) (undo-tree-id1924 . -6) (undo-tree-id1925 . -6) (undo-tree-id1926 . -6) (undo-tree-id1927 . -6) (undo-tree-id1928 . -6) (undo-tree-id1929 . -6) (undo-tree-id1930 . -6) (undo-tree-id1931 . -6) (undo-tree-id1932 . -6) (undo-tree-id1933 . -6) (undo-tree-id1934 . -6) (undo-tree-id1935 . -6) (undo-tree-id1936 . -6) (undo-tree-id1937 . -6) (undo-tree-id1938 . -6) (undo-tree-id1939 . -6) (undo-tree-id1940 . -6) (undo-tree-id1941 . -6) (undo-tree-id1942 . -6) (undo-tree-id1943 . -6) (undo-tree-id1944 . -6) (undo-tree-id1945 . -6) (undo-tree-id1946 . -6) (undo-tree-id1947 . -6) (undo-tree-id1948 . -7) (undo-tree-id1949 . -7) (undo-tree-id1950 . -7) (undo-tree-id1951 . -7) (undo-tree-id1952 . -7) (undo-tree-id1953 . -7) (undo-tree-id1954 . -7) (undo-tree-id1955 . -7) (undo-tree-id1956 . -7) (undo-tree-id1957 . -7) (undo-tree-id1958 . -7) (undo-tree-id1959 . -8) (undo-tree-id1960 . -8) (undo-tree-id1961 . -8) (undo-tree-id1962 . -8) (undo-tree-id1963 . -8) (undo-tree-id1964 . -8) (undo-tree-id1965 . -8) (undo-tree-id1966 . -8) (undo-tree-id1967 . -8) (undo-tree-id1968 . -8) (undo-tree-id1969 . -8) (undo-tree-id1970 . -8) (undo-tree-id1971 . -8) (undo-tree-id1972 . -8) (undo-tree-id1973 . -8) (undo-tree-id1974 . -8) (undo-tree-id1975 . -8) (undo-tree-id1976 . -8) (undo-tree-id1977 . -8) (undo-tree-id1978 . -8) (undo-tree-id1979 . -8) (undo-tree-id1980 . -8) (undo-tree-id1981 . -8) (undo-tree-id1982 . -8) (undo-tree-id1983 . -8) (undo-tree-id1984 . -8) (undo-tree-id1985 . -8) (undo-tree-id1986 . -8) (undo-tree-id1987 . -8) (undo-tree-id1988 . -8) (undo-tree-id1989 . -8) (undo-tree-id1990 . -8) (undo-tree-id1991 . -8) (undo-tree-id1992 . -8) (undo-tree-id1993 . -8) (undo-tree-id1994 . -8) (undo-tree-id1995 . -8) (undo-tree-id1996 . -8) (undo-tree-id1997 . -8) 1485) nil (26509 40766 646852 507000) 0 nil])
([nil nil ((1498 . 1499) (t 26509 40766 661500 95000)) nil (26509 40767 591190 158000) 0 nil])
([nil current ((1261 . 1269) (t 26509 40767 605501 56000)) nil (26509 41580 428278 777000) 0 nil])
nil
